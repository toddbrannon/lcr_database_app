 <!-- Include the navbar partial -->
 <%- include ('partials/header', { isLoggedIn: isLoggedIn, isAdmin: isAdmin }) -%>

 <div class="container-fluid mt-5 mb-5 pb-5">
   <h1 class="mx-4 mt-5 mb-3">Employee Hours Reports</h1>

   <form action="/pivot" method="GET">

       <label class = "text-info-lcr ml-4 mr-1 pl-2" for="locationSelect">Select Location:</label>
       <select name="location" id="locationSelect" class="py-1 pr-2 pl-2">
        <option value="">All</option>
         <% locations.forEach(location => { %>
             <option value="<%= location %>"><%= location %></option>
         <% }); %>
      </select>


       <button type="submit" class="btn btn-info-lcr btn-sm mb-1">Filter</button>
       <label class="text-info-lcr ml-4 mr-1 pl-2" for="citySelect">Hours threshold:</label>
       <input type="number" id="thresholdValue" name="thresholdValue" min="1" max="999" style="width: 4rem;" />
       <button type="button" id="applyButton" class="btn btn-info-lcr btn-sm mb-1">Apply</button>
       <button type="button" id="clearButton" class="btn btn-info-lcr btn-sm mb-1" style="display: none;">Clear</button>
       <button type="button" id="exportBtn" class="btn btn-info-lcr btn-sm mb-1 ml-4">Export to Excel</button>

   </form>

   <% for (const jobDesc of jobDescriptions) { %>
       <h5 class="mt-2 mx-4 text-secondary"><%= jobDesc %></h5>
       <div class = "fixed-first-column" style="overflow-x: auto; overflow-y: auto; max-height: 400px;"> <!-- Add this div with overflow-x style -->
       <table id="dataTable" class="table table-striped mx-4 mx-lg-1 px-4 table-bordered fixed-header">
           <thead>
               <tr>
                   <th class="name-column">Name</th>
                   <th>City</th>
                   <th>Location</th>
                   <% if (checkDates.length > 0) { %>
                     <% for (const checkDate of formattedCheckDates) { %>
                         <th><%= checkDate %></th>
                     <% } %>
                 <% } %>
               </tr>
           </thead>
           <tbody>
             <% for (const key in data) {
                 const employeeData = data[key];
                 if (employeeData.JobDescription === jobDesc) { %>
                     <tr>
                         <td class="name-cell"><%= employeeData.Name %></td>
                         <td><%= employeeData.City %></td>
                         <td><%= employeeData.Location %></td>
                         <% if (checkDates.length > 0) { %>
                             <% for (const checkDate of formattedCheckDates) { %>
                                 <td><%= employeeData.CheckDates[checkDate] || 0 %></td>
                             <% } %>
                         <% } %>
                     </tr>
             <%   }
             } %>
         </tbody>
         <!-- New tfoot for the count row -->
         <tfoot>
               <tr>
               <td colspan="3">Count</td> <!-- colspan=2 for Name and City columns -->
               <% formattedCheckDates.forEach(function() { %>
                   <td class="count-cell"></td> <!-- Empty cell for each date column -->
               <% }); %>
               </tr>
         </tfoot>
         
       </table>
       </div> <!-- Close the div here -->
       <% } %>
     
 </div>

 <script>
    document.addEventListener('DOMContentLoaded', (event) => {
      const thresholdInput = document.getElementById('thresholdValue');
      const clearButton = document.getElementById('clearButton');
      const exportBtn = document.getElementById('exportBtn');
      const dataTable = document.getElementById('dataTable');
    
      if (!exportBtn || !dataTable || !thresholdInput || !clearButton) {
        console.error('Required elements not found!');
        return;
      }
    
      console.log('DOM fully loaded and parsed');
    
      thresholdInput.addEventListener('input', function() {
        clearButton.style.display = this.value ? 'inline-block' : 'none';
      });
    
      document.getElementById('applyButton').addEventListener('click', function() {
        var threshold = parseInt(thresholdInput.value, 10);
        this.blur();
    
        if (isNaN(threshold) || threshold < 1 || threshold > 999) {
          alert('Please enter a number between 1 and 999');
          return;
        }
    
        var locationColumnIndex = 2;
        document.querySelectorAll('#dataTable tbody tr').forEach(function(tr) {
          tr.querySelectorAll('td').forEach(function(td, index) {
            if (index !== locationColumnIndex) {
              var value = parseFloat(td.textContent);
              td.style.backgroundColor = (!isNaN(value) && value > threshold) ? 'lightgreen' : '';
            }
          });
        });
      });
    
      clearButton.addEventListener('click', function() {
        thresholdInput.value = '';
        this.style.display = 'none';
        this.blur();
        document.querySelectorAll('#dataTable tbody tr td').forEach(function(td) {
          td.style.backgroundColor = '';
        });
      });
    
      function updateCounts() {
        var threshold = parseInt(thresholdInput.value, 10) || 0;
        document.querySelectorAll('.table').forEach(function(table) {
          var countCells = table.querySelectorAll('tfoot .count-cell');
          countCells.forEach(function(cell, index) {
            var count = 0;
            table.querySelectorAll('tbody tr').forEach(function(row) {
              var cellValue = parseFloat(row.cells[index + 3].textContent);
              if (cellValue > threshold) count++;
            });
            cell.textContent = count;
          });
        });
      }
    
      document.getElementById('applyButton').addEventListener('click', updateCounts);
      clearButton.addEventListener('click', function() {
        document.querySelectorAll('.count-cell').forEach(function(cell) {
          cell.textContent = '';
        });
        updateCounts();
      });
    
      exportBtn.addEventListener('click', function() {
        console.log('Exporting to Excel...');
        const groupedData = []; // Replace this with actual logic to prepare groupedData
        //... code to prepare groupedData ...
        document.querySelectorAll('.group-container').forEach(groupContainer => {
          const jobDesc = groupContainer.querySelector('.job-description').textContent;
          const table = groupContainer.querySelector('table');
          const headers = Array.from(table.querySelectorAll('th')).map(th => th.textContent);
        
          const data = [];
          table.querySelectorAll('tbody tr').forEach(row => {
              const rowData = {};
              row.querySelectorAll('td').forEach((cell, index) => {
                  const headerKey = headers[index].toLowerCase().replace(/\s+/g, '_');
                  rowData[headerKey] = cell.textContent;
              });
              data.push(rowData);
          });
        
          groupedData.push({ jobDesc, headers, data });
        });
    
        fetch('/export', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ groupedData, thresholdValue: thresholdInput.value })
        })
        .then(response => {
          if (!response.ok) {
            throw new Error('Network response was not ok');
          }
          return response.blob();
        })
        .then(blob => {
          const url = window.URL.createObjectURL(blob);
          const a = document.createElement('a');
          a.style.display = 'none';
          a.href = url;
          a.download = 'data_export.xlsx'; // Name of the file to be downloaded
          document.body.appendChild(a); // Append the anchor to the body
          a.click(); // Simulate a click on the anchor to trigger the download
          document.body.removeChild(a); // Remove the anchor from the body
          window.URL.revokeObjectURL(url);  // Clean up the object URL
        })
        .catch(error => {
          console.error('Error exporting data:', error);
        });
      });
    });
    
</script>

</body>  

</html>



<!-- /*
document.querySelectorAll('.group-container').forEach(groupContainer => {
  const jobDesc = groupContainer.querySelector('.job-description').textContent;
  const table = groupContainer.querySelector('table');
  const headers = Array.from(table.querySelectorAll('th')).map(th => th.textContent);

  const data = [];
  table.querySelectorAll('tbody tr').forEach(row => {
      const rowData = {};
      row.querySelectorAll('td').forEach((cell, index) => {
          const headerKey = headers[index].toLowerCase().replace(/\s+/g, '_');
          rowData[headerKey] = cell.textContent;
      });
      data.push(rowData);
  });

  groupedData.push({ jobDesc, headers, data });
});
*/ -->